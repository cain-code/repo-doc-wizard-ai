
import { DocumentationRequest, DocumentationResponse } from '@/types/api';

export class MockApiService {
  static async generateDocumentation(request: DocumentationRequest): Promise<DocumentationResponse> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));

    const mockDocumentation = `# ${this.extractRepoName(request.repo_url)}

## Overview
This is a mock-generated documentation for your GitHub repository. The AI-powered documentation generator analyzed your repository and created this comprehensive guide.

## Installation

\`\`\`bash
# Clone the repository
git clone ${request.repo_url}

# Navigate to the project directory
cd ${this.extractRepoName(request.repo_url)}

# Install dependencies
npm install
\`\`\`

## Usage

\`\`\`bash
# Start the development server
npm run dev
\`\`\`

## Features

- Modern React application with TypeScript
- Responsive design with Tailwind CSS
- Component-based architecture
- Professional documentation generation

## Technologies Used

- React 18
- TypeScript
- Tailwind CSS
- Vite
- shadcn/ui components

## Project Structure

\`\`\`
src/
├── components/          # Reusable UI components
├── pages/              # Page components
├── services/           # API and utility services
├── types/              # TypeScript type definitions
└── lib/                # Utility functions
\`\`\`

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## License

This project is licensed under the MIT License.

---

*Generated by GitDocAI - AI-Powered Documentation Generator*
`;

    return {
      success: true,
      documentation: mockDocumentation,
      metadata: {
        repo_analysis: {
          name: this.extractRepoName(request.repo_url),
          description: request.project_description || "A modern web application",
          language: request.primary_language || "typescript",
          technologies: ["React", "TypeScript", "Tailwind CSS", "Vite"],
          structure: {},
          readme_exists: true,
          license_type: "MIT",
          git_history: []
        },
        request_params: request
      }
    };
  }

  static async healthCheck(): Promise<{ status: string; service: string }> {
    return { status: "healthy", service: "Mock GitDocAI Backend" };
  }

  private static extractRepoName(url: string): string {
    const match = url.match(/github\.com\/[^\/]+\/([^\/]+)/);
    return match ? match[1].replace('.git', '') : 'repository';
  }
}
